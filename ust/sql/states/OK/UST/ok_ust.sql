--manually delete a few duplciates; compare capacity, old dates, etc.  keep the newer and better populated data

select  "FacilityID","tank_name"
from "OK_UST_Data"
group by  "FacilityID","tank_name"
having count(*) > 1;

select "FacilityID","TankNumber","CompartmentNumber"
 from erg_compartments_deduplicated
 group by "FacilityID","TankNumber","CompartmentNumber"
 having count(*) > 1;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Update the control table 

--EITHER:
--use insert_control.py to insert into public.ust_control
--OR:


--the script above returned a new ust_control_id of 11 for this dataset:
select * from public.ust_control where ust_control_id = 23;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Upload the state data 
/* 
EITHER:
script import_data_file_files.py will create the correct schema (if it doesn't yet exist), 
then upload all .xlsx, .xls, .csv, and .txt in the specified directory to this schema. 
To run, set these variables:

organization_id = 'OK' 
# Enter a directory (not a path to a specific file) for ust_path and ust_path
# Set to None if not applicable
ust_path = 'C:\Users\JChilton\repo\UST\ust\sql\states\SD\UST' 
overwrite_table = False 


load the rease data too to populate a field fields in UST from it
release_path = r'C:\Users\JChilton\OneDrive - Eastern Research Group\Desktop\UST\MD\Release\CASES 04-03-24\CASES 04-03-24'

OR:
manually in the database, create schema ok_ust if it does not exist, then manually upload the state data
*/

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

alter table "OK_UST_Facility_Data"  rename column "FacilityID" to facility_id;

alter table "OK_UST_Data"  rename column "Tank #" to tank_name;



------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Generate SQL statements to do the inserts into ust_element_mapping. 
Run the query below, paste the results into your console, then do a global replace of 9 for the ust_control_id 
Next, go through each generated SQL statement and do the following:
If there is no matching column in the state's data, delete the SQL statement 
If there is a matching column in the state's data, update the tanks and ORG_COL_NAME variables to match the state's data 
If you have questions or comments, replace the "null" with your comment. 
After you have updated all the SQL statements, run them to update the database. 
*/
select * from public.v_ust_element_summary_sql;

update ust_element_mapping
set programmer_comments ='See comments with substance_id in the ust_compartment_substance table for more info.'
where ust_control_id = 23 and epa_table_name = 'ust_tank_substance' and organization_table_name='erg_compartments_deduplicated';


select * from ust_element_mapping
where ust_control_id = 23 and  epa_table_name ='ust_tank_substance';

/*you can run this SQL so you can copy and paste table and column names into the SQL statements generated by the query above
select table_name, column_name from information_schema.columns 
where table_schema = 'ok_ust' order by table_name, ordinal_position;
*/


ok_ust.v_ust_tank_substance.tank_name

select * from "OK_UST_Facility_Data" b where b."Type" like '%Military%';

delete from erg_owner_type

create table erg_owner_type as

insert into erg_owner_type
select  distinct b.facility_number, 
case when b."Type" = 'Federal Military' then 'Military'
else a."Type"
end as owner_type
from ok_ust."OK_UST_Owner_Data" a
join ok_ust."OK_UST_Facility_Data" b on a."Owner ID" =b."OwnerID" ;

select * from erg_owner_type where facility_number in ('3309148');


select * from ust_element_mapping where ust_control_id = 23 and organization_column_name  like '%cap%';

insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_tank','tank_id','erg_tank','tank_id','ERG generated',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_tank_substance','tank_id','erg_tank','tank_id','ERG generated',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_tank_substance','tank_name','OK_UST_Data','tank_name',null,null);



insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment','tank_id','erg_tank','tank_id','ERG generated',null);

insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment','compartment_id','erg_compartment','compartment_id','ERG generated',null);

insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','tank_name','OK_UST_Data','tank_name',null,null);

insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','tank_id','erg_tank','tank_id','ERG generated',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','compartment_id','erg_compartment','compartment_id',null,null);

insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_tank_substance','facility_id','OK_UST_Data','FacilityID',null,null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_tank_substance','tank_id','OK_UST_Data','tank_name',null,null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_tank_substance','substance_id','compartments','Substance',null,null);



insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_id','OK_UST_Facility_Data','facility_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_name','OK_UST_Facility_Data','Name',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','owner_type_id','OK_UST_Owner_Data','Type',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_type1','OK_UST_Facility_Data','Type',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_address1','OK_UST_Facility_Data','Address',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_address2','OK_UST_Facility_Data','Address2',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_city','OK_UST_Facility_Data','City',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_zip_code','OK_UST_Facility_Data','Zip',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_tribal_site','OK_UST_Facility_Data','Trust land',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_tribe','OK_UST_Facility_Data','Tribe',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_latitude','OK_UST_Facility_Data','Latitude',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_longitude','OK_UST_Facility_Data','Longitude',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_facility','facility_owner_company_name','OK_UST_Owner_Data','Name',null);


update ust_element_mapping
set   epa_column_name = 'tank_id'
where ust_control_id = 23
 and epa_column_name = 'tank_name';


select * from erg_compartments_deduplicated;
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','substance_comment','erg_compartments_deduplicated','Substance',null,null);

select * from  ust_element_mapping where ust_control_id = 23 and epa_table_name = 'ust_facility';


select count(*) from erg_compartments_deduplicated; 

--49571

select  "FacilityID","tank_name"
from "OK_UST_Data"
group by  "FacilityID","tank_name"
having count(*) > 1;


select "FacilityID","TankNumber","CompartmentNumber"
 from erg_compartments_deduplicated
 group by "FacilityID","TankNumber","CompartmentNumber"
 having count(*) > 1;

select * from "OK_UST_Data" a
where a."FacilityID" ='21214' and a.tank_name = 3;

select * from erg_compartments_deduplicated
where "FacilityID" ='21214' and "TankNumber" =12;




select * from "OK_UST_Data" where tank_name is null;
select * from erg_compartments_deduplicated where "TankNumber" is null;


create table erg_compartments_deduplicated as
select   distinct
"FacilityID",
"TankNumber",
"CompartmentNumber",
"Substance",
"Capacity",
"CompartmentStatus"
from compartments c
where ("FacilityID" ,"TankNumber","CompartmentNumber") not in 
(select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1)
union 
select distinct "FacilityID",
"TankNumber",
"CompartmentNumber",
'Petroleum product' as substance_processed,
"Capacity",
"CompartmentStatus"
from compartments d
where ("FacilityID" ,"TankNumber","CompartmentNumber")  in 
(select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1)

select * from erg_compartments_deduplicated
update   ust_element_mapping set epa_table_name = 'ust_compartment_substance',organization_table_name='erg_compartments_deduplicated' where ust_control_id = 23 and epa_table_name = 'erg_compartments_deduplicated' ;

update ust_element_mapping 
set programmer_comments='The same facility ID, Tank ID, and Compartment ID can have different substances and there is no date to tell which one is the most recent. There are only 18 cases of this. Created a new table to derive the necessary substance data in this case. See query logic field for more details.',
epa_comments = 'EPA advised based on the limited number of occurances to default these specific records to substance=Petroleum product',
query_logic = '
create table erg_compartments_deduplicated as
select   distinct
"FacilityID",
"TankNumber",
"CompartmentNumber",
"Substance",
"Capacity",
"CompartmentStatus"
from compartments c
where ("FacilityID" ,"TankNumber","CompartmentNumber") not in 
(select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1)
union 
select distinct "FacilityID",
"TankNumber",
"CompartmentNumber",
''Petroleum product'' as substance_processed,
"Capacity",
"CompartmentStatus"
from compartments d
where ("FacilityID" ,"TankNumber","CompartmentNumber")  in 
(select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1);
',
epa_table_name = 'erg_compartments_deduplicated'
where ust_control_id = 23 and epa_table_name = 'erg_compartments_deduplicated' and epa_column_name ='substance_id';

drop table erg_compartments_deduplicated;

create table erg_compartments_deduplicated as
select   distinct
"FacilityID",
"TankNumber",
"CompartmentNumber",
"Substance" from compartments c
where ("FacilityID" ,"TankNumber","CompartmentNumber") not in 
(select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1)
union 
select distinct"FacilityID",
"TankNumber",
"CompartmentNumber",
'Petroleum product' as substance_processed
from compartments d
where ("FacilityID" ,"TankNumber","CompartmentNumber")  in 
(select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1);

select *  from erg_compartments_deduplicated where "FacilityID" = '20862' and "TankNumber"=2 and "CompartmentNumber"=1;

select count(*) from erg_compartments_deduplicated

select "FacilityID" ,"TankNumber","CompartmentNumber" 
from erg_compartments_deduplicated
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1;

select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1;



insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','facility_id','OK_UST_Data','FacilityID',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','multiple_tanks','OK_UST_Data','Manifold',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','tank_name','OK_UST_Data','tank_name',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','tank_status_id','OK_UST_Data','Status',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','tank_closure_date','OK_UST_Data','ClosedDate',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','tank_installation_date','OK_UST_Data','InstalledDate',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','compartmentalized_ust','OK_UST_Data','Compartments','where Compartments > 1');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','number_of_compartments','OK_UST_Data','Compartments',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','tank_material_description_id','OK_UST_Data','Tank Material',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_tank','tank_secondary_containment_id','OK_UST_Data','Tank Construction',null);


insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_compartment','compartment_id','compartments','CompartmentNumber',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_compartment','tank_id','OK_UST_Data','tank_name',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_compartment','facility_id','OK_UST_Data','FacilityID',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_compartment','compartment_name','OK_UST_Data','tank_name',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_compartment','compartment_name','OK_UST_Data','tank_name',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_compartment','compartment_status_id','OK_UST_Data','Status',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (23,'ust_compartment','compartment_capacity_gallons','OK_UST_Data','Capacity',null);


insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','facility_id','ORG_TAB_NAME','ORG_COL_NAME',null,null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','tank_id','ORG_TAB_NAME','ORG_COL_NAME',null,null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','compartment_id','ORG_TAB_NAME','ORG_COL_NAME',null,null);


insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','facility_id','OK_UST_Data','FacilityID',null,null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','tank_id','OK_UST_Data','tank_name',null,null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','compartment_id','compartments','CompartmentNumber',null,null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments, query_logic) values (23,'ust_compartment_substance','substance_id','compartments','Substance',null,null);


------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--see what columns in which table we need to map
/*
see what mapping hasn't yet been done for this dataset 
we'll be going through each of the results of this query below
so for each value of epa_column_name from this query result, there will be a 
section below where we generate SQL to perform the mapping 
*/
select epa_table_name, epa_column_name 
from 
	(select distinct epa_table_name, epa_column_name, table_sort_order, column_sort_order
	from v_ust_needed_mapping 
	where ust_control_id = 23-- and mapping_complete = 'N'
	order by table_sort_order, column_sort_order) x;


--substance_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 23 and epa_column_name = 'substance_id';


select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 2627 || ', ''' || "Substance" || ''', '''', null);'
from ok_ust."compartments" order by 1;

select * from compartments

select "FacilityID" ,"TankNumber","CompartmentNumber" from compartments
group by  "FacilityID" ,"TankNumber","CompartmentNumber"
having count(*) > 1;

select * from ust_element_value_mapping where ust_element_mapping_id  in (2627,2633) and lower(organization_value) = 'jet fuel';

select * from 

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Antifreeze', 'Antifreeze', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Asphalt Product', 'Other', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Aviation Fuel', 'Unknown aviation gas or jet fuel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Biodiesel', 'Diesel fuel (b-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Biodiesel <= 20%', 'Other unlisted blend containing any other mixture of diesel, renewable diesel, or 20% biodiesel or less',null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Biodiesel for Blending', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'DEF (Diesel Exhaust Fluid)', 'Diesel exhaust fluid (DEF, not federally regulated)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Diesel', 'Diesel fuel (b-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Diesel Containing > 20% Biodiesel', 'Diesel blend containing greater than 20% and less than 99% biodiesel', 'Please confirm');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Dyed Diesel', 'Off-road diesel/dyed diesel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'E-10', 'Gasoline E-10 (E1-E10)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'E-15', 'Gasoline E-15 (E-11-E15)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'E-85', 'E-85/Flex Fuel (E51-E83)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Ethanol', 'Ethanol blend gasoline (e-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Gasohol', 'Ethanol blend gasoline (e-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Gasoline', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Gasoline 100%', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Hazardous Material', 'Hazardous substance', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Heating Oil', 'Heating/fuel oil # unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Hydraulic Fluid', 'Hydraulic oil', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Jet Fuel', 'Unknown aviation gas or jet fuel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Kerosene', 'Kerosene', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Methanol', 'Hazardous substance', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Mixture', 'Other or mixture', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Motor Oil', 'Lube/motor oil (new)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Not Listed', 'Unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Solvent', 'Solvent', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Used Oil', 'Used oil/waste oil', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2627, 'Waste Oil', 'Used oil/waste oil', null);


insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Antifreeze', 'Antifreeze', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Asphalt Product', 'Other', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Aviation Fuel', 'Unknown aviation gas or jet fuel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Biodiesel', 'Diesel fuel (b-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Biodiesel <= 20%', 'Other unlisted blend containing any other mixture of diesel, renewable diesel, or 20% biodiesel or less',null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Biodiesel for Blending', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'DEF (Diesel Exhaust Fluid)', 'Diesel exhaust fluid (DEF, not federally regulated)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Diesel', 'Diesel fuel (b-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Diesel Containing > 20% Biodiesel', 'Diesel blend containing greater than 20% and less than 99% biodiesel', 'Please confirm');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Dyed Diesel', 'Off-road diesel/dyed diesel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'E-10', 'Gasoline E-10 (E1-E10)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'E-15', 'Gasoline E-15 (E-11-E15)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'E-85', 'E-85/Flex Fuel (E51-E83)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Ethanol', 'Ethanol blend gasoline (e-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Gasohol', 'Ethanol blend gasoline (e-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Gasoline', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Gasoline 100%', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Hazardous Material', 'Hazardous substance', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Heating Oil', 'Heating/fuel oil # unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Hydraulic Fluid', 'Hydraulic oil', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Jet Fuel', 'Unknown aviation gas or jet fuel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Kerosene', 'Kerosene', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Methanol', 'Hazardous substance', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Mixture', 'Other or mixture', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Motor Oil', 'Lube/motor oil (new)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Not Listed', 'Unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Solvent', 'Solvent', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Used Oil', 'Used oil/waste oil', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (2633, 'Waste Oil', 'Used oil/waste oil', null);

select * from public.substances s 
where lower(substance) like lower('%Used%');

select * from ust_element_value_mapping where organization_value like lower('%meth%'); 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--owner_type_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 23 and epa_column_name = 'owner_type_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1328 || ', ''' || "owner_type" || ''', '''', null);'
from ok_ust."erg_owner_type" order by 1;

select * from public.owner_types;


select distinct "Type" from "OK_UST_Owner_Data" order by 1;

select * from ust_element_value_mapping where ust_element_mapping_id = 1328;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Commercial', '', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'County', '', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Federal', '', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Indian', '', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Military', 'Military', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Municipal', '', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Not Listed', '', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Private', '', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'State', '', null);

select "Type" from "OK_UST_Owner_Data"

select *  from "OK_UST_Facility_Data" where  lower("Type") like '%mil%' ;


select * from ust_element_value_mapping where ust_element_mapping_id = 1328 and organization_value = 'Federal'; --when faciitiy type = Federal Military then 

select * from ust_element_value_mapping where ust_element_mapping_id = 1328 and organization_value = 'State';



create table erg_owner_type as
select  distinct b.facility_number, 
case when b."Type" like '%Military%' then 'Military'
else a."Type"
end as owner_type
from ok_ust."OK_UST_Owner_Data" a
join ok_ust."OK_UST_Facility_Data" b on a."Owner ID" =b."OwnerID" ;


select count(distinct facility_number) from erg_owner_type;




insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Commercial', 'Commercial', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'County', 'Local Government', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Federal', 'Federal Government - Non Military', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Indian', 'Tribal Government', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Municipal', 'Local Government', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Not Listed', 'Other', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'Private', 'Private', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1328, 'State', 'State Government - Non Military', null);


--facility_type1
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 23 and epa_column_name = 'facility_type1';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1329 || ', ''' || "Type" || ''', '''', null);'
from ok_ust."OK_UST_Facility_Data" order by 1;

select * from public.facility_types ft ;


insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Air Taxi (Airline)', 'Aviation/airport (non-rental car)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Auto Dealership', 'Auto dealership/auto maintenance & repair', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Contractor', 'Contractor', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Farm', 'Agricultural/farm', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Federal Military', 'Military', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Federal Non-Military', 'Federal government, non-military', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Gas Station', 'Retail fuel sales (non-marina)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Industrial', 'Industrial', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Marina', 'Marina', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Not Listed', 'Unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Petroleum Distributor', 'Bulk plant storage/petroleum distributor', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Railroad', 'Railroad', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Residential', 'Residential', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'School', 'School', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Truck/Transporter', 'Trucking/transport/fleet operation', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1329, 'Utilities', 'Utility', null);

--tank_status_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 23 and epa_column_name = 'tank_status_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1342 || ', ''' || "Status" || ''', '''', null);'
from ok_ust."OK_UST_Data" order by 1;

select * from public.tank_statuses ;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1342, 'CIU', 'Currently in use', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1342, 'POU', 'Closed (general)','Please confirm, I assume POU means permanently out of use');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1342, 'TOU', 'Temporarily out of service', 'Please confirm, I assume TOU means temp out of use');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1342, 'Xfer', 'Other', 'Please confirm, I assume Xfer means transfer');

select * from ust_element_value_mapping where ust_element_mapping_id =1352;

update  ust_element_value_mapping set programmer_comments =null where ust_element_mapping_id =1342;


--compartment_status_id
select * 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 23 and epa_column_name = 'compartment_status_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1352 || ', ''' || "CompartmentStatus" || ''', '''', null);'
from ok_ust."erg_compartments_deduplicated" order by 1;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1352, 'CIU', 'Currently in use', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1352, 'POU', 'Closed (general)','Please confirm, I assume POU means permanently out of use');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1352, 'TOU', 'Temporarily out of service', 'Please confirm, I assume TOU means temp out of use');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1352, 'Xfer', 'Other', 'Please confirm, I assume Xfer means transfer');


select * from ust_element_value_mapping where ust_element_mapping_id = 1352;
--tank_material_description_id

select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 23 and epa_column_name = 'tank_material_description_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1347 || ', ''' || "Tank Material" || ''', '''', null);'
from ok_ust."OK_UST_Data" order by 1;


insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1347, 'Concrete', 'Concrete', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1347, 'Fiberglass Reinforced Plastic', 'Fiberglass reinforced plastic', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1347, 'Steel', 'Steel (NEC)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1347, 'Steel With Fiberglass', 'Composite/clad (steel w/fiberglass reinforced plastic)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1347, 'Unknown', 'Unknown', null);

select * from public.tank_material_descriptions tmd 

--tank_secondary_containment_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 23 and epa_column_name = 'tank_secondary_containment_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1348 || ', ''' || "Tank Construction" || ''', '''', null);'
from ok_ust."OK_UST_Data" order by 1;

select * from public.tank_secondary_containments tsc 


insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1348, 'Double Walled', 'Double wall', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1348, 'Secondarily Contained / Jacketed', 'Jacketed', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1348, 'Single Walled', 'Single wall', null);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--check if there is any more mapping to do
select distinct epa_table_name, epa_column_name
from v_ust_needed_mapping 
where ust_control_id = 23 and mapping_complete = 'N'
order by 1, 2;

--check if any of the mapping is bad:
select database_lookup_table, epa_value 
from v_ust_bad_mapping 
where ust_control_id = 23 order by 1, 2;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*Step 1: create crosswalk views for columns that use a lookup table
run script org_mapping_xwalks.py to create crosswalk views for all lookup tables 
see new views:*/
select table_name 
from information_schema.tables 
where table_schema = 'ok_ust' and table_type = 'VIEW'
and table_name like '%_xwalk' order by 1;
/*
v_coordinate_source_xwalk
v_piping_style_xwalk
v_piping_wall_type_xwalk
v_state_xwalk
v_substance_xwalk
v_tank_material_description_xwalk
v_tank_status_xwalk
*/

--Step 2: see the EPA tables we need to populate, and in what order
select distinct epa_table_name, table_sort_order
from v_ust_table_population 
where ust_control_id = 23
order by table_sort_order;
/*
ust_facility
ust_tank
ust_tank_substance
ust_compartment
*/

/*Step 3: check if there where any dataset-level comments you need to incorporate:
in this case we need to ignore the aboveground storage tanks,
so add this to the where clause of the ust_release view */
select comments from ust_control where ust_control_id = 23;
--Filter by  ut_facility."TANK" = 1 AND ut_facility."OPENREGAST" = 0 AND ut_facility."REGAST" = 0. 

/*Step 4: work through the tables in order, using the information you collected 
to write views that can be used to populate the data tables 
NOTE! The view queried below (v_ust_table_population_sql) contains columns that help
      construct the select sql for the insertion views, but will require manual 
      oversight and manipulation by you! 
      In particular, check out the organization_join_table and organization_join_column 
      are used!!*/
select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 23 and epa_table_name = 'ust_facility'
order by column_sort_order;

/*Step 5: use the information from the queries above to create the view:
!!! NOTE look at the programmer_comments column to adjust the view if necessary
!!! NOTE also sometimes you need to explicitly cast data types so they match the EPA data tables
!!! NOTE also you may get errors related to data conversion when trying to compile the view
    you are creating here. This is good because it alerts you the data you are trying to
    insert is not compatible with the EPA format. Fix these errors before proceeding! 
!!! NOTE: Remember to do "select distinct" if necessary
!!! NOTE: Some states do not include State or EPA Region in their database, but it is generally
    safe for you to insert these yourself, so add them! (facility_state is a required field! */
drop view ok_ust.v_ust_facility;

create or replace view ok_ust.v_ust_facility as 
select distinct 
"facility_id"::character varying(50) as facility_id,
x."Name"::character varying(100) as facility_name,
owner_type_id as owner_type_id,
facility_type_id as facility_type1,
x."Address"::character varying(100) as facility_address1,
x."Address2"::character varying(100) as facility_address2,
x."City"::character varying(100) as facility_city,
x."Zip"::character varying(10) as facility_zip_code,
case when x."Trust land" is true then 'Yes' else 'No' end as facility_tribal_site,
x."Tribe"::character varying(200) as facility_tribe,
x."Latitude"::double precision as facility_latitude,
x."Longitude"::double precision as facility_longitude,
y."Name"::character varying(100) as facility_owner_company_name,
'OK' as facility_state,
6 as facility_epa_region
from ok_ust."OK_UST_Facility_Data" x 
left join ok_ust."OK_UST_Owner_Data" y on x."OwnerID" = y."Owner ID"
left join ok_ust.v_facility_type_xwalk a on a."organization_value" =x."Type"
left join ok_ust.erg_owner_type eot on eot.facility_number=x.facility_number
left join ok_ust.v_owner_type_xwalk votx on votx."organization_value" =eot.owner_type
;


select * from v_ust_facility

--review: 
select * from ok_ust.v_ust_facility;
select count(*) from ok_ust.v_ust_facility;
--13967
--------------------------------------------------------------------------------------------------------------------------
--now repeat for each data table:

--ust_tank 
select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 23 and epa_table_name = 'ust_tank'
order by column_sort_order;

/*be sure to do select distinct if necessary!
NOTE: ADD facility_id::character varying(50)!!!!
NOTE: tank_id (integer) is a required field - if the state data does not contain an integer field
      that uniquely identifies the tank, you must generate one (see Compartments below for how to do this).
*/



-- ok_ust.v_ust_tank source
drop view ok_ust.v_ust_tank;
CREATE OR REPLACE VIEW ok_ust.v_ust_tank
AS SELECT DISTINCT x."FacilityID"::character varying(50) AS facility_id,
    "tank_name"::integer as tank_id,
    vtsx.tank_status_id,
        CASE
            WHEN x."Manifold" IS TRUE THEN 'Yes'::text
            ELSE 'No'::text
        END AS multiple_tanks,
    x."ClosedDate"::date AS tank_closure_date,
    x."InstalledDate"::date AS tank_installation_date,
        CASE
            WHEN x."Compartments" <> ALL (ARRAY['0'::bigint, '1'::bigint]) THEN 'Yes'::text
            ELSE 'No'::text
        END AS compartmentalized_ust,
    x."Compartments"::integer AS number_of_compartments,
    vtmdx.tank_material_description_id,
    s.tank_secondary_containment_id
   FROM ok_ust."OK_UST_Data" x
	 LEFT JOIN ok_ust.v_tank_status_xwalk vtsx ON vtsx.organization_value::text = x."Status"
     LEFT JOIN ok_ust.v_tank_material_description_xwalk vtmdx ON vtmdx.organization_value::text = x."Tank Material"
     LEFT JOIN ok_ust.v_tank_secondary_containment_xwalk s ON s.organization_value::text = x."Tank Construction"
     JOIN ok_ust.erg_compartments_deduplicated b ON x."FacilityID" = b."FacilityID" AND x.tank_name = b."TankNumber";
    
select facility_id, tank_id from ok_ust.v_ust_tank   
group by facility_id, tank_id
having count(*) > 1;





select * from v_ust_tank;
select count(*) from v_ust_tank; 
39731



--tank substance

select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 23 and epa_table_name = 'ust_tank_substance'
order by column_sort_order;

drop view ok_ust.v_ust_tank_substance;

create or replace view ok_ust.v_ust_tank_substance as 
select distinct 
x."FacilityID"::character varying(50) AS facility_id,
x."tank_name"::integer as tank_id,
substance_id as substance_id
from ok_ust."OK_UST_Data" x
join ok_ust.erg_compartments_deduplicated b ON x."FacilityID"=b."FacilityID" and x."tank_name"=b."TankNumber" 
 join ok_ust.v_substance_xwalk vtsx on vtsx.organization_value = b."Substance"
where b."Substance" is not null;

select * from erg_compartments_deduplicated where 
select * from v_ust_tank_substance where  substance_id is null;
select count(*) from v_ust_tank_substance;
40980

select count(*) from v_ust_tank; 
39731

--------------------------------------------------------------------------------------------------------------------------
--ust_compartment
select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 23 and epa_table_name = 'ust_compartment'
order by column_sort_order;

/* be sure to do select distinct if necessary!
NOTE: ADD facility_id::character varying(50) and tank_id::int!!!!
NOTE: compartment_id (integer) is a required field - if the state data does not contain an integer field
      that uniquely identifies the compartment, you must generate one. 
      In this case, the state does not store compartment data, so we will generate the compartment ID
      Prefix any tables you create in the state schema that did not come from the source data with "erg_"! */



create or replace view ok_ust.v_ust_compartment as 
select distinct 
x."FacilityID"::character varying(50) as facility_id,
x."TankNumber"::integer as tank_id,
x."CompartmentNumber"::integer as compartment_id,
compartment_status_id as compartment_status_id,
x."Capacity"::integer as compartment_capacity_gallons
from "erg_compartments_deduplicated" x
join ok_ust.v_compartment_status_xwalk vtsx on vtsx.organization_value = x."CompartmentStatus"
join ok_ust."OK_UST_Data" b ON b."FacilityID"=x."FacilityID" and b."tank_name"=x."TankNumber" ;


analyze erg_compartments_deduplicated;

select count(*) from ok_ust.v_ust_compartment
49572
select * from v_ust_compartment;


select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 23 and epa_table_name = 'ust_compartment_substance'
order by column_sort_order;

select * from ust_tank_substance where substance_id is null ;

drop view ok_ust.v_ust_compartment_substance;

create or replace view ok_ust.v_ust_compartment_substance as 


create or replace view ok_ust.v_ust_compartment_substance as 
select distinct
x."FacilityID"::character varying(50) as facility_id,
x."TankNumber"::integer as tank_id,
x."CompartmentNumber"::integer as compartment_id,
substance_id as substance_id
from "erg_compartments_deduplicated" x
join ok_ust.v_substance_xwalk vtsx on vtsx.organization_value = x."Substance"
join ok_ust."OK_UST_Data" b ON b."FacilityID"=x."FacilityID" and b."tank_name"=x."TankNumber" 
where x."Substance" is not null;






select * from ok_ust.v_ust_compartment_substance;
select count(*) from ok_ust.v_ust_compartment_substance;
49554
--------------------------------------------------------------------------------------------------------------------------

--QA/QC

--check that you didn't miss any columns when creating the data population views:
--if any rows are returned by this query, fix the appropriate view by adding the missing columns!
select epa_table_name, epa_column_name, 
	organization_table_name, organization_column_name, 
	organization_join_table, organization_join_column, 
	deagg_table_name, deagg_column_name
from v_ust_missing_view_mapping a
where ust_control_id = 23
order by 1, 2;


--run Python QA/QC script

/*run script qa_check.py
set variables:
ust_or_release = 'ust' 
control_id = 11
export_file_path = None # If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_dir = None	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_name = None	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo

This script will check the views you just created in the state schema for the following:
1) Missing views - will check that if you created a child view (for example, v_ust_compartment), that the parent view(s) (for example, v_ust_tank)
   exist. 
2) Counts of child tables that have too few rows (for example, v_ust_compartment should have at least as many rows as v_ust_tank because
   every tank should have at least one compartment). 
3) Missing join columns to parent tables. For example, v_ust_compartment must contain facility_id and tank_id in order to be able to join it
   to its parent tables. 
4) Missing required columns. 
5) Required columns that exist but contain null values. 
6) Extraneous columns - will check for any columns in the views that don't match a column in the equivalent EPA table. This will help identify
   typos or other errors. 
7) Non-unique rows. To resolve any cases where the counts are greater than 0, check that you did a "select distinct" when creating these views.
   Then check for bad joins.  
8) Bad data types - will check for columns in the view where either the data type is different than the EPA column, or (for character columns) 
   if the length of the state value is too long to fit into the EPA column. If the data is too long to fit in the EPA column, this may indicate 
   an error in your code or mapping, OR it may mean you need to truncate the state's value to fit the EPA format. 
9) Failed check constraints. 
10) Bad mapping values. To resolve any cases where bad mapping values exist, examine the specific row(s) in public.ust_element_value_mapping 
   and ensure the epa_value exists in the associated lookup table. 

The script will also provide the counts of rows in ok_ust.v_ust_facility, ok_ust.v_ust_tank, ok_ust.v_ust_compartment, and
   ok_ust.v_ust_piping (if these views exist) - ensure these counts make sense! 
   
The script will export a QAQC spreadsheet (in additional to printing to the screen and logs). If there are errors, re-write the views above, 
then re-run the qa script, and proceed when all errors have been resolved. */



--------------------------------------------------------------------------------------------------------------------------
--insert data into the EPA schema 

/*run script populate_epa_data_tables.py	
set variables:
ust_or_release = 'ust' 
control_id = 11
delete_existing = False # can set to True if there is existing UST data you need to delete before inserting new
*/

--------------------------------------------------------------------------------------------------------------------------
--Quick sanity check of number of rows inserted:
select table_name, num_rows 
from v_ust_table_row_count
where ust_control_id = 23 
order by sort_order;
/*

ust_facility	13967
ust_tank	39731
ust_tank_substance	40980
ust_compartment	41341
ust_compartment_substance	41328
*/


select facility_id,tank_id,compartment_id from ok_ust.v_ust_compartment group by facility_id,tank_id,compartment_id having count(*) > 1;
--------------------------------------------------------------------------------------------------------------------------
--export template

/*run script export_template.py
set variables:
control_id = 9
ust_or_release = 'ust' 
organization_id = None  	# Can leave as None if you specify the control_id
data_only = False 			# Set to False to export full template including mapping and reference tabs
template_only = False 		# Set to False to export data and mapping tabs as well as reference tab
export_file_path = None 	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_dir = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_name = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo*/


--------------------------------------------------------------------------------------------------------------------------
--export control table  summary

/*run script control_table_summary.py
set variables:
control_id = 9
ust_or_release = 'ust' 
organization_id = None  	# Can leave as None if you specify the control_id
export_file_path = None 	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_dir = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_name = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo*/

--------------------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------------------


