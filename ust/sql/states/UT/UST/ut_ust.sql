

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Update the control table 

--EITHER:
--use insert_control.py to insert into public.ust_control
--OR:


--the script above returned a new ust_control_id of 11 for this dataset:
select * from public.ust_control where ust_control_id = 19;

update  public.ust_control 
set comments = 'Filter by  ut_facility."TANK" = 1 AND ut_facility."OPENREGAST" = 0 AND ut_facility."REGAST" = 0.  For the facility layer data, used ArcGIS Pro to pull in the facility layer and ran the convert coordinate notation on the lat/longs, then exported as a CSV for integration into the database.'
where  ust_control_id = 19;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Upload the state data 
/* 
EITHER:
script import_data_file_files.py will create the correct schema (if it doesn't yet exist), 
then upload all .xlsx, .xls, .csv, and .txt in the specified directory to this schema. 
To run, set these variables:

organization_id = 'UT' 
# Enter a directory (not a path to a specific file) for ust_path and ust_path
# Set to None if not applicable
ust_path = 'C:\Users\JChilton\repo\UST\ust\sql\states\SD\UST' 
overwrite_table = False 


load the rease data too to populate a field fields in UST from it
release_path = r'C:\Users\JChilton\OneDrive - Eastern Research Group\Desktop\UST\MD\Release\CASES 04-03-24\CASES 04-03-24'

OR:
manually in the database, create schema ut_ust if it does not exist, then manually upload the state data
*/

------------------------------------------------------------------------------------------------------------------------------------------------------------------------


alter table "TankPST_-34420683542140719" rename to ut_tank;
alter table "fac" rename to ut_facility;

ALTER TABLE ut_facility
  RENAME COLUMN "FacilityID" TO facility_id;

ALTER TABLE ut_tank
  RENAME COLUMN "FACILITYID" TO facility_id;

 ALTER TABLE ut_tank
  RENAME COLUMN "TANKID" TO tank_id;

 
select count(distinct facility_id) from ut_facility_ust; --6088
select  distinct facility_id , tank_id from ut_tank_ust ; --18653


select * from ut_facility_ust;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Generate SQL statements to do the inserts into ust_element_mapping. 
Run the query below, paste the results into your console, then do a global replace of 9 for the ust_control_id 
Next, go through each generated SQL statement and do the following:
If there is no matching column in the state's data, delete the SQL statement 
If there is a matching column in the state's data, update the tanks and ORG_COL_NAME variables to match the state's data 
If you have questions or comments, replace the "null" with your comment. 
After you have updated all the SQL statements, run them to update the database. 
*/
select * from public.v_ust_element_summary_sql;

/*you can run this SQL so you can copy and paste table and column names into the SQL statements generated by the query above
select table_name, column_name from information_schema.columns 
where table_schema = 'ut_ust' order by table_name, ordinal_position;
*/
delete from ust_element_mapping where ust_control_id = 19 and epa_column_name in ('tank_id','compartment_id','piping_id');






insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_id','ut_facility_ust','facility_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_name','ut_facility_ust','LOCNAME',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_type1','ut_facility_ust','FACILITYDE',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_address1','ut_facility_ust','LOCSTR',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_city','ut_facility_ust','LOCCITY',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_county','ut_facility_ust','LOCCOUNTY',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_zip_code','ut_facility_ust','LOCZIP',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_latitude','ut_facility_ust','DDLat',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_longitude','ut_facility_ust','DDLon',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','coordinate_source_id','ut_facility_ust','UTMDESC',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','facility_owner_company_name','ut_facility_ust','OWNERNAME',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_facility','ust_reported_release','ut_facility_ust','RELEASE','where RELEASE > 0');

insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','facility_id','ut_tank_ust','facility_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_name','ut_tank_ust','tank_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_status_id','ut_tank_ust','TANKSTATUS||'' ''||CLOSURESTA','Concat these two fields together to get more detailed information.');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','federally_regulated','ut_tank_ust','FEDERALREG',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','emergency_generator','ut_tank_ust','TANKEMERGE',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','multiple_tanks','ut_tank_ust','tank_id','count distinct tank_id grouped by facility_id');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_closure_date','ut_tank_ust','DATECLOSE',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_installation_date','ut_tank_ust','DATEINSTAL',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_material_description_id','ut_tank_ust','TANKMATDES',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_corrosion_protection_interior_lining','ut_tank_ust','TANKMODSDE','where TANKMODSDE = Lined Interior');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_corrosion_protection_impressed_current','ut_tank_ust','TANKMATDES','where TANKMODSDE = Impressed Current Cathodic Protection');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank','tank_secondary_containment_id','ut_tank_ust','TANKMODSDE',null);


insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank_substance','facility_id','ut_tank_ust','facility_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank_substance','tank_id','ut_tank_ust','tank_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_tank_substance','substance_id','ut_tank_ust','SUBSTANCED||'' ''||SUBSTANCET','Concat these two fields together to get more detailed information. If both fields are null then populate Unknown value.');



insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_compartment','facility_id','ut_tank_ust','facility_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_compartment','tank_id','ut_tank_ust','tank_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_compartment','compartment_id','ut_tank_ust','tank_id','Reusing tank_id here because it is a 1-1 unique relationship');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_compartment','compartment_status_id','ut_tank_ust','TANKSTATUS||'' ''||CLOSURESTA','Concat these two fields together to get more detailed information.');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_compartment','compartment_capacity_gallons','ut_tank_ust','TANKCAPACI',null);

insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','facility_id','ut_tank_ust','facility_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','tank_id','ut_tank_ust','tank_id',null);
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_id','ut_tank_ust','tank_id','Reusing tank_id here because it is a 1-1 unique relationship');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_frp','ut_tank_ust','PIPEMATDES','where PIPEMATDES = Fiberglass Reinforced Plastic');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_gal_steel','ut_tank_ust','PIPEMATDES','where PIPEMATDES = Galvanized Steel');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_steel','ut_tank_ust','PIPEMATDES',' where PIPEMATDES = Bare Steel');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_copper','ut_tank_ust','PIPEMATDES','where PIPEMATDES = Copper');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_flex','ut_tank_ust','PIPEMATDES','where PIPEMATDES = Flexible Plastic');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_no_piping','ut_tank_ust','PIPEMATDES','where PIPEMATDES = No Piping');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_other','ut_tank_ust','PIPEMATDES','where PIPEMATDES like Other%');
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','piping_material_unknown','ut_tank_ust','PIPEMATDES','Please verify - where PIPEMATDES in (Not Listed, Unknown)' );
insert into ust_element_mapping (ust_control_id, epa_table_name, epa_column_name, organization_table_name, organization_column_name, programmer_comments) values (19,'ust_piping','pipe_secondary_containment_other','ut_tank_ust','PIPEMODDES','Please verify - where PIPEMODDES = (Secondary Containment)');


------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--see what columns in which table we need to map
/*
see what mapping hasn't yet been done for this dataset 
we'll be going through each of the results of this query below
so for each value of epa_column_name from this query result, there will be a 
section below where we generate SQL to perform the mapping 
*/
select epa_table_name, epa_column_name 
from 
	(select distinct epa_table_name, epa_column_name, table_sort_order, column_sort_order
	from v_ust_needed_mapping 
	where ust_control_id = 19 and mapping_complete = 'N'
	order by table_sort_order, column_sort_order) x;
/*



*/
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--substance_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 19 and epa_column_name = 'substance_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1324 || ', ''' || "SUBSTANCED"||' '||coalesce ("SUBSTANCET",'') || ''', '''', null);'
from ut_ust."ut_tank_ust" order by 1;

select distinct "SUBSTANCED"
from ut_tank_ust;




select distinct state_value, epa_value
from archive.v_ust_element_mapping 
where lower(state_value) like lower('%used%oil%')
order by 1, 2;


select * from public.substances s  where (substance) like '%Used oil/waste oil%';


delete from ust_element_value_mapping where ust_element_mapping_id = 1324;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel B5 Biodiesel', '95% renewable diesel, 5% biodiesel', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel B99 Biodiesel', '99.9 percent renewable diesel, 0.01% biodiesel', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel Bio-Diesel', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel Diesel #1', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel Diesel #2 (L.S.)', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel Diesel #2 (U.L.S.)', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel Off-road Diesel', 'Off-road diesel/dyed diesel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel Regular', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasohol E85 (85% ethonal, 15% gasoline)', 'E-85/Flex Fuel (E51-E83)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline Diesel #2 (U.L.S.)', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline E10 (10% Ethanol, 90 % Gas)', 'Gasoline E-10 (E1-E10)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline E15 (15% Ethanol, 85% Gas)', 'Gasoline E-15 (E-11-E15)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline E85 (85% ethonal, 15% gasoline)', 'E-85/Flex Fuel (E51-E83)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline High Octane (Racing)', 'E-85/Flex Fuel (E51-E83)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline Midgrade', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline Non-Ethanol', 'Gasoline (non-ethanol)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline Premium', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline Regular', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Unknown ', 'Unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Av Gas ', 'Aviation gasoline', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'DEF - Diesel Exhaust Fluid ', 'Diesel exhaust fluid (DEF, not federally regulated)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Diesel ', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Fuel Additive ', 'Gasoline (unknown type)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gas/Diesel ', 'Diesel fuel (b-unknown)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasohol ', 'Ethanol blend gasoline (e-unknown)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Gasoline ', 'Gasoline (unknown type)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Hazardous Substance ', 'Hazardous substance', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Heating Oil ', 'Heating/fuel oil # unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Jet Fuel ', 'Unknown aviation gas or jet fuel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Kerosene ', 'Kerosene', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Mixture ', 'Other or mixture', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'New Oil ', 'Lube/motor oil (new)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Not Listed ', 'Unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Other ', 'Other or mixture', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1324, 'Used Oil ', 'Used oil/waste oil', null);



--compartment_status_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 19 and epa_column_name = 'compartment_status_id';


select distinct "TANKSTATUS", "CLOSURESTA" from ut_ust."ut_tank_ust";



insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Currently In Use ', 'Currently in use', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Install in Process ', 'Other', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use ', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use Change in service', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use Change in Service', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use Pre 1974 Status', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use Tank closed in place', 'Closed (in place)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use Tank Closed in Place', 'Closed (in place)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use Tank removed from ground', 'Closed (removed from ground)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Permanently Out of Use Tank Removed from Ground', 'Closed (removed from ground)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Temporarily Out of Use ', 'Temporarily out of service', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Temporarily Out of Use Change in service', 'Temporarily out of service', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1310, 'Temporarily Out of Use Tank closed in place', 'Temporarily out of service', null);


--tank_secondary_containment_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 19 and epa_column_name = 'tank_secondary_containment_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1303 || ', ''' || "TANKMODSDE" || ''', '''', null);'
from ut_ust."ut_tank_ust" order by 1;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1303, 'Cathodic Protection', 'Other', 'MAPPING NEEDED');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1303, 'Double-Walled', 'Double wall', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1303, 'Excavation Liner', 'Excavation liner', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1303, 'Lined Interior', 'Other', 'MAPPING NEEDED');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1303, 'Secondary Containment', 'Other', 'MAPPING NEEDED');


select * from  archive.v_ust_element_mapping  where element_name like '%SecondaryContainment%';
select distinct state_value, epa_value
from archive.v_ust_element_mapping 
where lower(state_value) like lower('%cathodic%')
order by 1, 2;


select * from public.tank_secondary_containments tsc 

--facility_type1
select distinct 'select distinct "' || organization_column_name || '" from ut_ust."' || organization_table_name || '" order by 1;'
from v_ust_needed_mapping 
where ust_control_id = 19 and epa_column_name = 'facility_type1';



select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 19 and epa_column_name = 'facility_type1';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1282 || ', ''' || "FACILITYDE" || ''', '''', null);'
from ut_ust."ut_facility_ust" order by 1;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Air Taxi (Airline)', 'Aviation/airport (non-rental car)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Aircraft Owner', 'Aviation/airport (non-rental car)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Auto Dealership', 'Auto dealership/auto maintenance & repair', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Commercial', 'Commercial', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Contractor', 'Contractor', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Farm', 'Agricultural/farm', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Federal Military', 'Military', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Federal Non-Military', 'Federal government, non-military', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Former Gas Station', 'Retail fuel sales (non-marina)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'FORMER GAS STATION', 'Retail fuel sales (non-marina)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Gas Station', 'Retail fuel sales (non-marina)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Industrial', 'Industrial', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Local Government', 'State/local government', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Not Listed', 'Unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Other', 'Other', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Petroleum Distributor', 'Bulk plant storage/petroleum distributor', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Railroad', 'Railroad', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Residential', 'Residential', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'State Government', 'State/local government', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Truck/Transporter', 'Trucking/transport/fleet operation', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1282, 'Utilities', 'Utility', null);



--coordinate_source_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 19 and epa_column_name = 'coordinate_source_id';

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1289 || ', ''' || "UTMDESC" || ''', '''', null);'
from ut_ust."ut_facility_ust" order by 1;


insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1289, 'Digital Topographic Map', 'Map interpolation', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1289, 'Guess - Need to verify', 'Unknown', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1289, 'Hand Held GPS with Base Station Corrections', 'GPS', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1289, 'Orthoquad (DOQ) 1 meter Image', 'Other', 'Please verify');

select * from public.coordinate_sources cs 



--tank_status_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 19 and epa_column_name = 'tank_status_id';


select distinct "TANKSTATUS", "CLOSURESTA" from ut_ust."ut_tank_ust";

--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1294 || ', ''' || "TANKSTATUS"||' '||COALESCE ("CLOSURESTA",'') || ''', '''', null);'
from ut_ust."ut_tank_ust" order by 1;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Currently In Use ', 'Currently in use', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Install in Process ', 'Other', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use ', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use Change in service', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use Change in Service', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use Pre 1974 Status', 'Closed (general)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use Tank closed in place', 'Closed (in place)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use Tank Closed in Place', 'Closed (in place)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use Tank removed from ground', 'Closed (removed from ground)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Permanently Out of Use Tank Removed from Ground', 'Closed (removed from ground)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Temporarily Out of Use ', 'Temporarily out of service', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Temporarily Out of Use Change in service', 'Temporarily out of service', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1294, 'Temporarily Out of Use Tank closed in place', 'Temporarily out of service', null);

select * from public.tank_statuses ts 


--tank_material_description_id
select insert_sql 
from v_ust_needed_mapping_insert_sql 
where ust_control_id = 19 and epa_column_name = 'tank_material_description_id';


--paste the insert_sql from the first row below, then run the query:
select distinct 
	'insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (' || 1300 || ', ''' || "TANKMATDES" || ''', '''', null);'
from ut_ust."ut_tank_ust" order by 1;

insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Asphalt Coated or Bare Steel', 'Asphalt coated or bare steel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Cathodically Prot. Steel', 'Cathodically protected steel (without coating)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Composite (Steel w/ FRP)', 'Composite/clad (steel w/fiberglass reinforced plastic)', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Concrete', 'Concrete', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Epoxy Coated Steel (STIP2)', 'Epoxy coated steel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Fiberglass Reinforced Plastic', 'Fiberglass reinforced plastic', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Galvanic Cathodic Protection (STIP3)', 'Cathodically protected steel (without coating)', 'Please verify');
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Impressed Current Cathodic Protection', 'Coated and cathodically protected steel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Not Listed', 'Unknown', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Other', 'Other', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Polyethylene Tank Jacket', 'Jacketed steel', null);
insert into ust_element_value_mapping (ust_element_mapping_id, organization_value, epa_value, programmer_comments) values (1300, 'Unknown', 'Unknown', null);

select distinct state_value, epa_value
from archive.v_ust_element_mapping 
where lower(state_value) like lower('%stip3%')
order by 1, 2;

select * from public.tank_material_descriptions tmd ; 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--check if there is any more mapping to do
select distinct epa_table_name, epa_column_name
from v_ust_needed_mapping 
where ust_control_id = 19 and mapping_complete = 'N'
order by 1, 2;

--check if any of the mapping is bad:
select database_lookup_table, epa_value 
from v_ust_bad_mapping 
where ust_control_id = 19 order by 1, 2;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*Step 1: create crosswalk views for columns that use a lookup table
run script org_mapping_xwalks.py to create crosswalk views for all lookup tables 
see new views:*/
select table_name 
from information_schema.tables 
where table_schema = 'ut_ust' and table_type = 'VIEW'
and table_name like '%_xwalk' order by 1;
/*
v_coordinate_source_xwalk
v_piping_style_xwalk
v_piping_wall_type_xwalk
v_state_xwalk
v_substance_xwalk
v_tank_material_description_xwalk
v_tank_status_xwalk
*/

--Step 2: see the EPA tables we need to populate, and in what order
select distinct epa_table_name, table_sort_order
from v_ust_table_population 
where ust_control_id = 19
order by table_sort_order;
/*
ust_facility
ust_tank
ust_tank_substance
ust_compartment
*/

/*Step 3: check if there where any dataset-level comments you need to incorporate:
in this case we need to ignore the aboveground storage tanks,
so add this to the where clause of the ust_release view */
select comments from ust_control where ust_control_id = 19;
--Filter by  ut_facility."TANK" = 1 AND ut_facility."OPENREGAST" = 0 AND ut_facility."REGAST" = 0. 

/*Step 4: work through the tables in order, using the information you collected 
to write views that can be used to populate the data tables 
NOTE! The view queried below (v_ust_table_population_sql) contains columns that help
      construct the select sql for the insertion views, but will require manual 
      oversight and manipulation by you! 
      In particular, check out the organization_join_table and organization_join_column 
      are used!!*/
select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 19 and epa_table_name = 'ust_facility'
order by column_sort_order;

/*Step 5: use the information from the queries above to create the view:
!!! NOTE look at the programmer_comments column to adjust the view if necessary
!!! NOTE also sometimes you need to explicitly cast data types so they match the EPA data tables
!!! NOTE also you may get errors related to data conversion when trying to compile the view
    you are creating here. This is good because it alerts you the data you are trying to
    insert is not compatible with the EPA format. Fix these errors before proceeding! 
!!! NOTE: Remember to do "select distinct" if necessary
!!! NOTE: Some states do not include State or EPA Region in their database, but it is generally
    safe for you to insert these yourself, so add them! (facility_state is a required field! */
drop view ut_ust.v_ust_facility;

create or replace view ut_ust.v_ust_facility as 
select distinct 
"facility_id"::character varying(50) as facility_id,
"LOCNAME"::character varying(100) as facility_name,
facility_type_id as facility_type1,
"LOCSTR"::character varying(100) as facility_address1,
"LOCCITY"::character varying(100) as facility_city,
"LOCCOUNTY"::character varying(100) as facility_county,
"LOCZIP"::character varying(10) as facility_zip_code,
"DDLat"::double precision as facility_latitude,
"DDLon"::double precision as facility_longitude,
coordinate_source_id as coordinate_source_id,
"OWNERNAME"::character varying(100) as facility_owner_company_name,
case when "RELEASE" <> '0' then 'Yes' end as ust_reported_release,
'UT' as facility_state,
8 as facility_epa_region
from ut_ust.ut_facility_ust x 
left join ut_ust.v_facility_type_xwalk a on a."organization_value" =x."FACILITYDE"
left join ut_ust.v_coordinate_source_xwalk b on b."organization_value" = x."UTMDESC"
;

select distinct ust_reported_release from v_ust_facility;


--review: 
select * from ut_ust.v_ust_facility;
select count(*) from ut_ust.v_ust_facility;
--6088
--------------------------------------------------------------------------------------------------------------------------
--now repeat for each data table:

--ust_tank 
select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 19 and epa_table_name = 'ust_tank'
order by column_sort_order;

/*be sure to do select distinct if necessary!
NOTE: ADD facility_id::character varying(50)!!!!
NOTE: tank_id (integer) is a required field - if the state data does not contain an integer field
      that uniquely identifies the tank, you must generate one (see Compartments below for how to do this).
*/

drop table ut_ust.erg_tank;
create table ut_ust.erg_tank (facility_id int, tank_name  int,  tank_id int generated always as identity);
insert into ut_ust.erg_tank (facility_id,tank_name)
select  facility_id, tank_id  from ut_ust.ut_tank_ust;

drop view ut_ust.v_ust_tank;

create or replace view ut_ust.v_ust_tank as 
select distinct 
x."facility_id"::character varying(50) as facility_id,
t."tank_id"::integer as tank_id,
t.tank_name::character varying(50) as tank_name,
tank_status_id as tank_status_id,
"FEDERALREG"::character varying(7) as federally_regulated,
"TANKEMERGE"::character varying(7) as emergency_generator,
"DATECLOSE"::date as tank_closure_date,
"DATEINSTAL"::date as tank_installation_date,
tank_material_description_id as tank_material_description_id,
case "TANKMODSDE" when 'Impressed Current Cathodic Protection' then 'Yes' end as tank_corrosion_protection_impressed_current,
case "TANKMODSDE" when 'Lined Interior' then 'Yes' end  as tank_corrosion_protection_interior_lining, 
tank_secondary_containment_id as tank_secondary_containment_id
from ut_ust.ut_tank_ust x
join ut_ust.erg_tank t on x."facility_id" = t.facility_id  and x.tank_id = t.tank_name
left join ut_ust.v_tank_status_xwalk vtsx on vtsx.organization_value = x."TANKSTATUS"|| ' '||coalesce (x."CLOSURESTA",'')
left join ut_ust.v_tank_material_description_xwalk vtmdx  on vtmdx.organization_value = x."TANKMATDES"
left join ut_ust.v_tank_secondary_containment_xwalk s  on s.organization_value = x."TANKMODSDE"


select * from v_ust_tank;
select count(*) from v_ust_tank; 
18653

--------------------------------------------------------------------------------------------------------------------------
--ust_tank_substance

select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 19 and epa_table_name = 'ust_tank_substance'
order by column_sort_order;


/*be sure to do select distinct if necessary!
NOTE: ADD facility_id::character varying(50) and tank_id::int!!!!
*/

create or replace view ut_ust.v_ust_tank_substance as 
select distinct 
	x."facility_id"::character varying(50) as facility_id,
t."tank_id"::integer as tank_id,
	sx.substance_id as substance_id
from ut_ust.ut_tank_ust x
join ut_ust.erg_tank t on x."facility_id" = t.facility_id  and x.tank_id = t.tank_name
left join ut_ust.v_substance_xwalk sx on x."SUBSTANCED"||' '||coalesce (x."SUBSTANCET",'') = sx.organization_value;




select count(*) from ut_ust.v_ust_tank_substance;
--18653
select * from v_ust_tank_substance;

--------------------------------------------------------------------------------------------------------------------------
--ust_compartment
select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, data_type, character_maximum_length,
	programmer_comments, database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 19 and epa_table_name = 'ust_compartment'
order by column_sort_order;

/* be sure to do select distinct if necessary!
NOTE: ADD facility_id::character varying(50) and tank_id::int!!!!
NOTE: compartment_id (integer) is a required field - if the state data does not contain an integer field
      that uniquely identifies the compartment, you must generate one. 
      In this case, the state does not store compartment data, so we will generate the compartment ID
      Prefix any tables you create in the state schema that did not come from the source data with "erg_"! */

drop table ut_ust.erg_compartment;
create table ut_ust.erg_compartment (facility_id int, tank_id int,  tank_name  int,  compartment_id int generated always as identity);
insert into ut_ust.erg_compartment (facility_id, tank_id,tank_name)
select  facility_id,tank_id, tank_name from ut_ust.erg_tank;


create or replace view ut_ust.v_ust_compartment as 
select distinct 
x."facility_id"::character varying(50) as facility_id,
t.tank_id::integer as tank_id,
t.compartment_id::integer as compartment_id,
compartment_status_id as compartment_status_id,
"TANKCAPACI"::integer as compartment_capacity_gallons
from ut_ust.ut_tank_ust x  
join ut_ust.erg_compartment t on x."facility_id" = t.facility_id  and x.tank_id = t.tank_name
left join ut_ust.v_compartment_status_xwalk vtsx on vtsx.organization_value = x."TANKSTATUS"|| ' '||coalesce (x."CLOSURESTA",'');


select count(*) from v_ust_compartment;
18653
select * from v_ust_compartment;


--------------------------------------------------------------------------------------------------------------------------
--ust_piping


select organization_table_name_qtd, organization_column_name_qtd,
	selected_column, programmer_comments, 
	database_lookup_table, database_lookup_column,
	--organization_join_table_qtd, organization_join_column_qtd,
	deagg_table_name, deagg_column_name 
from v_ust_table_population_sql
where ust_control_id = 19 and epa_table_name = 'ust_piping'
order by column_sort_order;


drop table ut_ust.erg_piping;
create table ut_ust.erg_piping (facility_id int, tank_id int,  tank_name  int,  compartment_id int, piping_id int generated always as identity);
insert into ut_ust.erg_piping (facility_id, tank_id,tank_name,compartment_id)
select  facility_id,tank_id, tank_name,compartment_id from ut_ust.erg_compartment;


drop view ut_ust.v_ust_piping;

create or replace view ut_ust.v_ust_piping as
select  distinct
t.piping_id::varchar(50) piping_id,
c.facility_id::varchar(50) as facility_id,
t.tank_id::integer as tank_id,
t.compartment_id::integer as compartment_id,
case "PIPEMATDES" when 'Fiberglass Reinforced Plastic' then 'Yes' end as piping_material_frp,	
case "PIPEMATDES" when 'Galvanized Steel' then 'Yes' end as  piping_material_gal_steel,	
case "PIPEMATDES" when 'Bare Steel' then 'Yes' end as  piping_material_steel,	
case "PIPEMATDES" when 'Copper' then 'Yes' end as  piping_material_copper,	
case "PIPEMATDES" when 'Flexible Plastic' then 'Yes' end as  piping_material_flex,	
case "PIPEMATDES" when 'No Piping' then 'Yes' end as  piping_material_no_piping,	
case when "PIPEMATDES" like 'Other%' then 'Yes' end as  piping_material_other,	
case when "PIPEMATDES" in ('Not Listed', 'Unknown')  then 'Yes' end as  piping_material_unknown,	
case "PIPEMATDES" when 'Secondary Containment' then 'Yes' end as  pipe_secondary_containment_other	
from ut_ust.ut_tank_ust c  
join ut_ust.erg_piping t on c."facility_id" = t.facility_id  and c.tank_id = t.tank_name;


select * from ut_ust.v_ust_piping;
select count(*) from ut_ust.v_ust_piping; 18653



--------------------------------------------------------------------------------------------------------------------------

--QA/QC

--check that you didn't miss any columns when creating the data population views:
--if any rows are returned by this query, fix the appropriate view by adding the missing columns!
select epa_table_name, epa_column_name, 
	organization_table_name, organization_column_name, 
	organization_join_table, organization_join_column, 
	deagg_table_name, deagg_column_name
from v_ust_missing_view_mapping a
where ust_control_id = 19
order by 1, 2;

failed check constraint ut_ust.facility_ust_reported_release_chk


--run Python QA/QC script

/*run script qa_check.py
set variables:
ust_or_release = 'ust' 
control_id = 11
export_file_path = None # If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_dir = None	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_name = None	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo

This script will check the views you just created in the state schema for the following:
1) Missing views - will check that if you created a child view (for example, v_ust_compartment), that the parent view(s) (for example, v_ust_tank)
   exist. 
2) Counts of child tables that have too few rows (for example, v_ust_compartment should have at least as many rows as v_ust_tank because
   every tank should have at least one compartment). 
3) Missing join columns to parent tables. For example, v_ust_compartment must contain facility_id and tank_id in order to be able to join it
   to its parent tables. 
4) Missing required columns. 
5) Required columns that exist but contain null values. 
6) Extraneous columns - will check for any columns in the views that don't match a column in the equivalent EPA table. This will help identify
   typos or other errors. 
7) Non-unique rows. To resolve any cases where the counts are greater than 0, check that you did a "select distinct" when creating these views.
   Then check for bad joins.  
8) Bad data types - will check for columns in the view where either the data type is different than the EPA column, or (for character columns) 
   if the length of the state value is too long to fit into the EPA column. If the data is too long to fit in the EPA column, this may indicate 
   an error in your code or mapping, OR it may mean you need to truncate the state's value to fit the EPA format. 
9) Failed check constraints. 
10) Bad mapping values. To resolve any cases where bad mapping values exist, examine the specific row(s) in public.ust_element_value_mapping 
   and ensure the epa_value exists in the associated lookup table. 

The script will also provide the counts of rows in ut_ust.v_ust_facility, ut_ust.v_ust_tank, ut_ust.v_ust_compartment, and
   ut_ust.v_ust_piping (if these views exist) - ensure these counts make sense! 
   
The script will export a QAQC spreadsheet (in additional to printing to the screen and logs). If there are errors, re-write the views above, 
then re-run the qa script, and proceed when all errors have been resolved. */



--------------------------------------------------------------------------------------------------------------------------
--insert data into the EPA schema 

/*run script populate_epa_data_tables.py	
set variables:
ust_or_release = 'ust' 
control_id = 11
delete_existing = False # can set to True if there is existing UST data you need to delete before inserting new
*/

--------------------------------------------------------------------------------------------------------------------------
--Quick sanity check of number of rows inserted:
select table_name, num_rows 
from v_ust_table_row_count
where ust_control_id = 19 
order by sort_order;
/*
ust_facility	6088
ust_tank	18653
ust_tank_substance	18653
ust_compartment	18653
ust_piping	18653
*/


--------------------------------------------------------------------------------------------------------------------------
--export template

/*run script export_template.py
set variables:
control_id = 9
ust_or_release = 'ust' 
organization_id = None  	# Can leave as None if you specify the control_id
data_only = False 			# Set to False to export full template including mapping and reference tabs
template_only = False 		# Set to False to export data and mapping tabs as well as reference tab
export_file_path = None 	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_dir = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_name = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo*/


--------------------------------------------------------------------------------------------------------------------------
--export control table  summary

/*run script control_table_summary.py
set variables:
control_id = 9
ust_or_release = 'ust' 
organization_id = None  	# Can leave as None if you specify the control_id
export_file_path = None 	# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_dir = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo
export_file_name = None		# If export_file_path and export_file_dir/export_file_name are None, defaults to exporting to export directory of repo*/

--------------------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------------------

