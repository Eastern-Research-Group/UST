------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* ORGANIZATION VALUES MAY NEED TO BE DEAGGREGATED for ust_tank_substance.substance_id!
 * 
 * Schema = "example"
 * Organization table name = "Tanks"
 * Organization column name = "Tank Substance"
 * Review the organization values below. If there are multiple values in a single row, the values need to be deaggregated before proceeding.
 */

--select distinct "Tank Substance" from example."Tanks" where "Tank Substance" is not null order by 1;
/* Organization values:
'Diesel'
'Leaded Gasoline'
'Premium Gasoline, Motor Oil'
'Premium Gasoline, Used Motor Oil'
'Unleaded Gasoline, Antifreeze, Racing Gasoline'
 */

/* IF after reviewing the organization values, you determine that there are in fact multiple values per row,
 * run deagg.py, setting the variables below:

ust_or_release = 'ust' 			# Valid values are 'ust' or 'release'
control_id = 1                  # Enter an integer that is the ust_control_id or release_control_id
table_name = 'Tanks' 				# Enter a string containing organization table name
column_name = 'Tank Substance'				# Enter a string containing organization column name
delimiter = '', '' 				# Defaults to ','; delimiter from the column beging deaggregated in the state table. Use 
 for hard returns.
drop_existing = False 			# Boolean, defaults to False; if True will drop existing deagg table with the same name


* After running deagg.py, run the SQL below to view the value deagg table:
*/
select * from example.erg_tank_substance_deagg order by 2;

/* Next, run script deagg_rows.py to crosswalk the deaggreated value to facility, tank, or compartment-level rows.
 * Set the script variables below, substituting XXXXX and ZZZZZ
for a list of the columns in the SOURCE data you need to group by (e.g. ["FacilityID","TankID","ComartmentID"]).

ust_or_release = 'ust' 			# Valid values are 'ust' or 'release'
control_id = 1                 # Enter an integer that is the ust_control_id or release_control_id
data_table_name = 'Tanks' 			# Enter a string containing organization table name that contains the aggregated data 
data_table_pk_cols = ['XXXXX','ZZZZZ'] 		# Python list of column names FROM THE SOURCE DATA that the new table should be grouped by, for example, in UST, substances may be grouped by ['FacilityID','TankID'] or ['FacilityID','TankID','CompartmentID'] 
data_deagg_column_name = '' 	# Column name FROM THE SOURCE DATA that contains the aggregated values 
delimiter = ', ' 				# Defaults to ', '; delimiter from the column beging deaggregated in the source table. Use '\n' for hard returns.
deagg_table_name = 'erg_tank_substance_deagg'           # Deagg table name generated by deagg.py. It will begin with an 'erg_' prefix. Check column deagg_table_name in table ust_element_mapping or release_element_mapping if you don't know it. (deagg.py will set this value.)
drop_existing = False 			# Boolean, defaults to False. Set to True to drop the _datarows_deagg table that this script creates before beginning (for example, if you need to rerun this script)


 * After running deagg_rows.py, run the SQL below to view the rows deagg table:
 */
select * from example.erg_tank_substance_datarows_deagg order by 2;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
